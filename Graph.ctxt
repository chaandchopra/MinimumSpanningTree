#BlueJ class context
comment0.target=Graph
comment0.text=\r\n\ Write\ a\ description\ of\ class\ Graph\ here.\r\n\r\n\ @author\ (your\ name)\r\n\ @version\ (a\ vershttps\://github.com/chaandchopra/MinimumSpanningTreeion\ number\ or\ a\ date)\r\n
comment1.params=vertex\ edges
comment1.target=Graph(int,\ int)
comment2.params=n
comment2.target=void\ addNode(Node)
comment3.params=vertex1
comment3.target=java.util.LinkedList\ returnConnections(java.lang.String)
comment4.params=vertex
comment4.target=int\ searchLoc(java.lang.String)
comment5.params=conn
comment5.target=java.lang.String\ PrintLinkedList(java.util.LinkedList)
comment5.text=public\ Graph(String\ fileLoc)\r\n\ \ \ \ {\r\n\ \ \ \ \ \ \ \ e\ \=\ new\ EdgeCollection(fileLoc);\r\n\ \ \ \ \ \ \ \ graphDim\ \=\ e.GraphDimension();\ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ edges\ \=\ e.EdgeArray();\r\n\ \ \ \ \ \ \ \ connections\ \=\ new\ LinkedList[graphDim[0]];\r\n\ \ \ \ \ \ \ \ for(int\ i\ \=\ 0;\ i\ <\ graphDim[0];\ i++)\r\n\ \ \ \ \ \ \ \ \ \ \ \ connections[i]\ \=\ new\ LinkedList();\r\n\ \ \ \ \ \ \ \ Vertex1\ \=\ new\ String[graphDim[0]];\r\n\ \ \ \ }\r\n\ \ \ \ public\ void\ ImplementVertex1()\r\n\ \ \ \ {\r\n\ \ \ \ \ \ \ \ int\ exist\ \=\ 0,\ notNullPtr\ \=\ 0;\r\n\ \ \ \ \ \ \ \ for(int\ i\ \=\ 0\ ;\ i\ <\ graphDim[1];\ i++)\r\n\ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ String\ vertex1\ \=\ edges[i].getVertex1();\r\n\ \ \ \ \ \ \ \ \ \ \ \ String\ vertex2\ \=\ edges[i].getVertex2();\r\n\ \ \ \ \ \ \ \ \ \ \ \ exist\ \=\ 0;\r\n\ \ \ \ \ \ \ \ \ \ \ \ for(String\ s\:\ Vertex1)\r\n\ \ \ \ \ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if(s\ \!\=\ null\ &&\ s.equals(vertex1))\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ exist\ \=\ 1;\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ break;\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ if(exist\ \=\=\ 0)\r\n\ \ \ \ \ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Vertex1[notNullPtr]\ \=\ vertex1;\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ notNullPtr++;\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\r\n\ \ \ \ \ \ \ \ \ \ \ \ exist\ \=\ 0;\r\n\ \ \ \ \ \ \ \ \ \ \ \ for(String\ s\:\ Vertex1)\r\n\ \ \ \ \ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if(s\ \!\=\ null\ &&\ s.equals(vertex2))\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ exist\ \=\ 1;\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ break;\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ if(exist\ \=\=\ 0)\r\n\ \ \ \ \ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Vertex1[notNullPtr]\ \=\ vertex2;\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ notNullPtr++;\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\ \ \ \ \ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ }\r\n\ \ \ \ public\ void\ ImplementConnections()\r\n\ \ \ \ {\r\n\ \ \ \ \ \ \ \ System.out.println(connections.length);\r\n\ \ \ \ \ \ \ \ for(int\ i\ \=\ 0;\ i\ <\ graphDim[0];\ ++i)\r\n\ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ String\ currVertex\ \=\ Vertex1[i];\r\n\ \ \ \ \ \ \ \ \ \ \ \ for(Node\ n\ \:\ edges)\r\n\ \ \ \ \ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ String\ nodeV1\ \=\ n.getVertex1();\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if(nodeV1.equals(currVertex))\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ connections[i].add(n);\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ }\r\n\ \ \ \ public\ void\ CreateAdjacencyList()\r\n\ \ \ \ {\r\n\ \ \ \ \ \ \ \ ImplementVertex1();\r\n\ \ \ \ \ \ \ \ ImplementConnections();\r\n}
comment6.params=
comment6.target=java.lang.String\ toString()
comment7.params=
comment7.target=void\ PrimsAlgorithm()
numComments=8
